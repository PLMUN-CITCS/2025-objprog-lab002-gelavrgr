[33mcommit 44d6007a972cbf0125063c052de5bddba9235724[m
Author: github-classroom[bot] <66690702+github-classroom[bot]@users.noreply.github.com>
Date:   Tue Feb 25 05:35:08 2025 +0000

    Initial commit

[1mdiff --git a/.github/workflows/classroom.yml b/.github/workflows/classroom.yml[m
[1mnew file mode 100644[m
[1mindex 0000000..3ee1dd8[m
[1m--- /dev/null[m
[1m+++ b/.github/workflows/classroom.yml[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32mname: Autograding Tests[m
[32m+[m[32mon: ["push", "repository_dispatch"][m
[32m+[m[32mpermissions:[m
[32m+[m[32m  checks: write[m
[32m+[m[32m  actions: read[m
[32m+[m[32m  contents: read[m
[32m+[m[32m  statuses: write[m
[32m+[m[32mjobs:[m
[32m+[m[32m  run-autograding-tests:[m
[32m+[m[32m    runs-on: ubuntu-latest[m
[32m+[m[32m    if: github.actor != 'github-classroom[bot]'[m
[32m+[m[32m    steps:[m
[32m+[m[32m      - name: Checkout code[m
[32m+[m[32m        uses: actions/checkout@v4[m
[32m+[m[32m      - name: Install Python dependencies[m
[32m+[m[32m        run: |[m
[32m+[m[32m          python -m pip install --upgrade pip[m
[32m+[m[32m      - name: File Existence Check[m
[32m+[m[32m        id: file-existence-check[m
[32m+[m[32m        uses: classroom-resources/autograding-command-grader@v1[m
[32m+[m[32m        with:[m
[32m+[m[32m          test-name: File Existence Check[m
[32m+[m[32m          command: "test -f VariablesAndCaseSensitivity.java"[m
[32m+[m[32m          timeout: 10[m
[32m+[m[32m          max-score: 10[m
[32m+[m[32m      - name: Execution Check[m
[32m+[m[32m        id: execution-check[m
[32m+[m[32m        uses: classroom-resources/autograding-command-grader@v1[m
[32m+[m[32m        with:[m
[32m+[m[32m          test-name: Run Check - VariablesAndCaseSensitivity.java[m
[32m+[m[32m          setup-command: "chmod +x ./run_tests.sh"[m
[32m+[m[32m          command: "./run_tests.sh"[m
[32m+[m[32m          timeout: 10[m
[32m+[m[32m          max-score: 90[m
[32m+[m[32m      - name: Autograding Reporter[m
[32m+[m[32m        uses: classroom-resources/autograding-grading-reporter@v1[m
[32m+[m[32m        env:[m
[32m+[m[32m          FILE-EXISTENCE-CHECK_RESULTS: "${{steps.file-existence-check.outputs.result}}"[m
[32m+[m[32m          EXECUTION-CHECK_RESULTS: "${{steps.execution-check.outputs.result}}"[m
[32m+[m[32m        with:[m
[32m+[m[32m          runners: file-existence-check,execution-check[m
\ No newline at end of file[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..22ba6d0[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1,219 @@[m
[32m+[m[32m# **2025-OBJPROG-LAB002**[m
[32m+[m
[32m+[m[32mWeek 02 - Introduction to Java Programming[m
[32m+[m
[32m+[m[32mLaboratory # 02 - Guided Coding Exercise: Variable Declarations & Case-Sensitivity[m
[32m+[m
[32m+[m[32m## **Instructions**[m
[32m+[m
[32m+[m[32m### **Step 1.1: Accept the Assignment**[m
[32m+[m
[32m+[m[32m   1. Click on the assignment link provided by your instructor.[m
[32m+[m[32m   2. GitHub Classroom will create a **private repository** under your GitHub account.[m
[32m+[m[32m   3. After the repository is created, click **"Go to Repository"** to view your assignment.[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m### **Step 1.2: Setup your Git Environment**[m
[32m+[m[32mOnly perform this if this is the first time you will setup your Git Environment[m
[32m+[m
[32m+[m[32m   1. Create a GitHub Account:[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   https://github.com/signup?source=login[m
[32m+[m[32m   ```[m
[32m+[m[41m      [m
[32m+[m[32m   2. Download and Install Git on your Laptop/Desktop:[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   https://git-scm.com/downloads[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m   3. Create a Folder in your Laptop/Desktop[m
[32m+[m[32m   4. Right-click anywhere in the created folder and select "Open Git Bash Here".[m
[32m+[m[32m   5. In the Git Bash Terminal, set your git name, perform command:[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git config --global user.name "Your Name"[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m   6. In the Git Bash Terminal, set your git email, perform command:[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git config --global user.email "your.email@example.com"[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m   7. Create your SSH Key, just follow the instructions, no need to provide filename and passphrase. In the Git Bash Terminal, perform command:[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   ssh-keygen -t rsa -b 4096 -C "your_email@example.com"[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m   8. Copy your SSH Keys into clipboard. In the Git Bash Terminal, perform command:[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   clip < ~/.ssh/id_rsa.pub[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m   9. Log in to your GitHub account.[m
[32m+[m[32m   10. In the upper-right corner of GitHub, click your profile picture and select Settings.[m
[32m+[m[32m   11. In the left sidebar, click on SSH and GPG keys.[m
[32m+[m[32m   12. Click the New SSH key button.[m
[32m+[m[32m   13. In the Title field, give the key a recognizable name (e.g., "My Windows Laptop").[m
[32m+[m[32m   14. In the Key field, CTRL + V or paste the keys copied into your clipboard. Save the key.[m
[32m+[m[32m   15. Go Back to terminal, use command:[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   ssh -T git@github.com[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m### **Step 2: Clone the Repository to Your Local Machine**[m
[32m+[m
[32m+[m[32m   1. On your repository page, click the green **"Code"** button.[m
[32m+[m[32m   2. Copy the repository URL (choose HTTPS for simplicity).[m
[32m+[m[32m   3. Open your terminal (or Git Bash, Command Prompt, or PowerShell) and run:[m
[32m+[m[41m   [m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git clone <git_repo_url>[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m   4. Navigate into the cloned folder:[m
[32m+[m[41m   [m
[32m+[m[32m   ```bash[m
[32m+[m[32m   cd <git_cloned_folder>[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m### **Step 3: Complete the Assignment**[m
[32m+[m
[32m+[m[32m**Laboratory # 02 - Guided Coding Exercise: Variable Declarations & Case-Sensitivity**[m
[32m+[m
[32m+[m[32m   **Objective:**[m
[32m+[m[32m   - Create variables with different native data types (integers, decimals, strings).[m
[32m+[m[32m   - Understand the importance of case-sensitivity in identifiers.[m
[32m+[m
[32m+[m[32m   **Desired Output:**[m
[32m+[m[32m   ```txt[m
[32m+[m[32m   Student Age: 15[m
[32m+[m[32m   Item Price: $29.99[m
[32m+[m[32m   Student Name: Alice[m
[32m+[m[32m   Counter: 10[m
[32m+[m[32m   Counter (Different Case): 20[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m   **File Naming Convention:**[m
[32m+[m[32m   - `VariablesAndCaseSensitivity.java`[m
[32m+[m
[32m+[m[32m   **Notable Observations (to be discussed after completing the exercise):**[m
[32m+[m[32m- Case Sensitivity: The most important observation is the demonstration of Java's case sensitivity. The difference in output between counter and Counter clearly shows that Java treats these as distinct variables. This reinforces the importance of careful naming and consistent capitalization.[m
[32m+[m[32m- Variable Declaration and Initialization: The exercise reinforces the process of declaring variables of different data types (int, double, String) and initializing them with values. This is a fundamental concept in Java (and most programming languages).[m
[32m+[m[32m- Data Type Selection: Students should observe how different data types are used for different kinds of data (age as an integer, price as a double, name as a String). This highlights the importance of choosing the correct data type.[m
[32m+[m[32m- Output using System.out.println(): The activity uses System.out.println() to display the values of variables. This is the standard way to produce output in Java console programs, and students get practice using it.[m
[32m+[m[32m- String Concatenation: The use of + to combine strings and variables within the System.out.println() statements (e.g., "Student Age: " + studentAge) demonstrates string concatenation, a common operation.[m
[32m+[m[32m- Naming Conventions: While not a "result" in the same way as the output, the activity emphasizes the importance of following naming conventions (camelCase). Students should observe how this improves code readability.[m
[32m+[m
[32m+[m[32m   **Java Programming Best Practices:**[m
[32m+[m[32m   - Descriptive Naming: Choose variable names that clearly indicate their purpose (e.g., studentAge instead of age). This makes your code easier to read and understand.[m
[32m+[m[32m   - Camel Case: Follow Java's camelCase convention for variable names. Start with a lowercase letter, and capitalize the first letter of each subsequent word (e.g., itemPrice, studentName).[m
[32m+[m[32m   - Case Sensitivity Matters: Java is case-sensitive. counter and Counter are treated as completely different variables. Be mindful of capitalization.[m
[32m+[m[32m   - Comments: While the exercise didn't heavily emphasize them, get into the habit of adding comments to explain your code. This is crucial for maintainability and collaboration. Even simple comments help![m
[32m+[m[32m   - Data Types: Use the appropriate data type for your variables (e.g., int for whole numbers, double for decimals, String for text).[m
[32m+[m[32m   - Consistent Indentation: Although not explicitly in the instructions, consistent indentation greatly improves readability. Most IDEs will automatically handle this for you.[m
[32m+[m[41m      [m
[32m+[m[32m   **Step-by-Step Instructions:**[m
[32m+[m
[32m+[m[32m   1. Class and Main Method[m
[32m+[m[32m      - Create a file named `VariablesAndCaseSensitivity.java`.[m
[32m+[m[32m      - Define the class `VariablesAndCaseSensitivity`.[m
[32m+[m[32m      - Inside the class, define the `main` method.  This is where your program starts running.[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      public class VariablesAndCaseSensitivity {[m
[32m+[m[32m          public static void main(String[] args) {[m
[32m+[m[41m      [m
[32m+[m[32m          }[m
[32m+[m[32m      }[m
[32m+[m[32m      ```[m
[32m+[m[41m      [m
[32m+[m[32m   2. Declare an Integer Variable[m
[32m+[m[32m      - Inside the `main` method, declare an integer variable named `studentAge` and initialize it with a whole number (e.g., 15).[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      int studentAge = 15;[m
[32m+[m[32m      ```[m
[32m+[m[41m            [m
[32m+[m[32m   3. Declare a Double Variable[m
[32m+[m[32m      - Below the `studentAge` declaration, declare a double variable named `itemPrice` and initialize it with a decimal number (e.g., 29.99).[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      double itemPrice = 29.99;[m
[32m+[m[32m      ```[m
[32m+[m
[32m+[m[32m   4. Declare a String Variable[m
[32m+[m[32m      - Below the `itemPrice` declaration, declare a String variable named `studentName` and initialize it with a name (e.g., "Alice").  Remember that Strings are enclosed in double quotes.[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      String studentName = "Alice";[m
[32m+[m[32m      ```[m
[32m+[m
[32m+[m[32m   5. Demonstrate Case Sensitivity (Variable 1)[m
[32m+[m[32m      - Declare an integer variable named `counter` and initialize it with a number (e.g., 10).[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      int counter = 10;[m
[32m+[m[32m      ```[m
[32m+[m
[32m+[m[32m   6. Demonstrate Case Sensitivity (Variable 2)[m
[32m+[m[32m      - Declare another integer variable named `Counter` (notice the capital 'C'). Initialize it with a different number (e.g., 20).[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      int Counter = 20;[m
[32m+[m[32m      ```[m
[32m+[m
[32m+[m[32m   7. Output the Values (Age)[m
[32m+[m[32m      - Use `System.out.println()` to display the value of the `studentAge` variable along with a descriptive label (e.g., "Student Age: ").[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      System.out.println("Student Age: " + studentAge);[m
[32m+[m[32m      ```[m
[32m+[m
[32m+[m[32m   8. Output the Values (Price)[m
[32m+[m[32m      - Use `System.out.println()` to display the value of the `itemPrice` variable with a label (e.g., "Item Price: $").[m
[32m+[m[32m      ```Java[m
[32m+[m[32m      System.out.println("Item Price: $" + itemPrice);[m
[32m+[m[32m      ```[m
[32m+[m
[32m+[m[32m   9. Output the Values (Name)[m
[32m+[m[32m      - Use `System.out.println()` to display the value of the `studentName` variable with a label (e.g., "Student Name: ").[m
[32m+[m[32m        ```Java[m
[32m+[m[32m        System.out.println("Student Name: " + studentName);[m
[32m+[m[32m        ```[m
[32m+[m
[32m+[m[32m   10. Output Case Sensitivity Variables[m
[32m+[m[32m      - Use `System.out.println()` to display the value of both `counter` and `Counter` variables, each with its own label. This will demonstrate that Java treats them as two distinct variables.[m
[32m+[m[32m        ```Java[m
[32m+[m[32m        System.out.println("Counter: " + counter);[m
[32m+[m[32m        System.out.println("Counter (Different Case): " + Counter);[m
[32m+[m[32m        ```[m
[32m+[m
[32m+[m[32m   11. Compile and Run[m
[32m+[m[32m       - Save the file as `VariablesAndCaseSensitivity.java`.[m
[32m+[m[32m       - Compile the code using `javac VariablesAndCaseSensitivity.java` in your terminal or command prompt.[m
[32m+[m[32m       - Run the compiled code using `java VariablesAndCaseSensitivity`.[m
[32m+[m
[32m+[m[32m### **Step 4: Push Changes to GitHub**[m
[32m+[m[32mOnce you've completed your changes, follow these steps to upload your work to your GitHub repository.[m
[32m+[m
[32m+[m[32m1. Check the status of your changes:[m
[32m+[m[32m   Open the terminal and run:[m
[32m+[m[41m   [m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git status[m
[32m+[m[32m   ```[m
[32m+[m[32m   This command shows any modified or new files.[m
[32m+[m[41m   [m
[32m+[m[32m2. Stage the changes:[m
[32m+[m[32m   Add all modified files to staging:[m
[32m+[m[41m   [m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git add .[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m3. Commit your changes:[m
[32m+[m[32m   Write a meaningful commit message:[m
[32m+[m[41m   [m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git commit -m "Submitting OBJPROG Week 02 - Session 01 - Exercise 01"[m
[32m+[m[32m   ```[m
[32m+[m[41m   [m
[32m+[m[32m4. Push your changes to GitHub:[m
[32m+[m[32m   Upload your changes to your remote repository:[m
[32m+[m[41m   [m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git push origin main[m
[32m+[m[32m   ```[m
[1mdiff --git a/run_tests.sh b/run_tests.sh[m
[1mnew file mode 100644[m
[1mindex 0000000..b804784[m
[1m--- /dev/null[m
[1m+++ b/run_tests.sh[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32m# Run the Python program and capture the output[m
[32m+[m[32moutput=$(java VariablesAndCaseSensitivity.java)[m
[32m+[m
[32m+[m[32m# Expected output[m
[32m+[m[32mexpected=$(cat tests/output.txt)[m
[32m+[m
[32m+[m[32m# Check if output matches expected[m
[32m+[m[32mif [ "$output" == "$expected" ]; then[m
[32m+[m[32m  echo "Tests passed"[m
[32m+[m[32m  exit 0[m
[32m+[m[32melse[m
[32m+[m[32m  echo "Tests failed"[m
[32m+[m[32m  echo "Expected: $expected"[m
[32m+[m[32m  echo "Got: $output"[m
[32m+[m[32m  exit 1[m
[32m+[m[32mfi[m
\ No newline at end of file[m
[1mdiff --git a/tests/output.txt b/tests/output.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..b9d3073[m
[1m--- /dev/null[m
[1m+++ b/tests/output.txt[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32mStudent Age: 15[m
[32m+[m[32mItem Price: $29.99[m
[32m+[m[32mStudent Name: Alice[m
[32m+[m[32mCounter: 10[m
[32m+[m[32mCounter (Different Case): 20[m
\ No newline at end of file[m
